{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SpiderEL\\\\Desktop\\\\webpage 5.0\\\\frontend\\\\src\\\\contexts\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the theme context easily\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  // Default to 'light' or get from localStorage\n  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light');\n\n  // Apply the theme to the document body whenever it changes\n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  // Function to toggle the theme\n  const toggleTheme = async () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n\n    // If user is logged in, save preference to backend\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        await axios.put('http://localhost:5000/api/settings', {\n          theme: newTheme\n        }, {\n          headers: {\n            'x-auth-token': token\n          }\n        });\n      } catch (error) {\n        console.error('Failed to save theme preference:', error);\n      }\n    }\n  };\n  const value = {\n    theme,\n    toggleTheme,\n    setTheme // Expose setTheme to sync with DB on login\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"3ZrzI9B7kxTUELTFlX71vn6HZU0=\");\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","axios","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","theme","setTheme","localStorage","getItem","document","documentElement","setAttribute","setItem","toggleTheme","newTheme","token","put","headers","error","console","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SpiderEL/Desktop/webpage 5.0/frontend/src/contexts/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ThemeContext = createContext();\r\n\r\n// Custom hook to use the theme context easily\r\nexport const useTheme = () => useContext(ThemeContext);\r\n\r\nexport const ThemeProvider = ({ children }) => {\r\n  // Default to 'light' or get from localStorage\r\n  const [theme, setTheme] = useState(localStorage.getItem('theme') || 'light');\r\n\r\n  // Apply the theme to the document body whenever it changes\r\n  useEffect(() => {\r\n    document.documentElement.setAttribute('data-theme', theme);\r\n    localStorage.setItem('theme', theme);\r\n  }, [theme]);\r\n  \r\n  // Function to toggle the theme\r\n  const toggleTheme = async () => {\r\n    const newTheme = theme === 'light' ? 'dark' : 'light';\r\n    setTheme(newTheme);\r\n\r\n    // If user is logged in, save preference to backend\r\n    const token = localStorage.getItem('authToken');\r\n    if (token) {\r\n      try {\r\n        await axios.put(\r\n          'http://localhost:5000/api/settings',\r\n          { theme: newTheme },\r\n          { headers: { 'x-auth-token': token } }\r\n        );\r\n      } catch (error) {\r\n        console.error('Failed to save theme preference:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    theme,\r\n    toggleTheme,\r\n    setTheme, // Expose setTheme to sync with DB on login\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={value}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,YAAY,gBAAGP,aAAa,CAAC,CAAC;;AAEpC;AACA,OAAO,MAAMQ,QAAQ,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,UAAU,CAACI,YAAY,CAAC;AAAA;AAACE,EAAA,CAA1CD,QAAQ;AAErB,OAAO,MAAME,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC7C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAACc,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC;;EAE5E;EACAd,SAAS,CAAC,MAAM;IACde,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEN,KAAK,CAAC;IAC1DE,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEP,KAAK,CAAC;EACtC,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMQ,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,MAAMC,QAAQ,GAAGT,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACQ,QAAQ,CAAC;;IAElB;IACA,MAAMC,KAAK,GAAGR,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIO,KAAK,EAAE;MACT,IAAI;QACF,MAAMnB,KAAK,CAACoB,GAAG,CACb,oCAAoC,EACpC;UAAEX,KAAK,EAAES;QAAS,CAAC,EACnB;UAAEG,OAAO,EAAE;YAAE,cAAc,EAAEF;UAAM;QAAE,CACvC,CAAC;MACH,CAAC,CAAC,OAAOG,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MAC1D;IACF;EACF,CAAC;EAED,MAAME,KAAK,GAAG;IACZf,KAAK;IACLQ,WAAW;IACXP,QAAQ,CAAE;EACZ,CAAC;EAED,oBACER,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAjB,QAAA,EACjCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAACrB,GAAA,CAzCWF,aAAa;AAAAwB,EAAA,GAAbxB,aAAa;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}