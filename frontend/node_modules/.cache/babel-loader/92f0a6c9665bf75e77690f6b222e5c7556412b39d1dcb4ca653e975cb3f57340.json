{"ast":null,"code":"import axios from 'axios';\nconst API = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\n\n// Add a request interceptor to include the token on all requests\nAPI.interceptors.request.use(req => {\n  if (localStorage.getItem('authToken')) {\n    req.headers['x-auth-token'] = localStorage.getItem('authToken');\n  }\n  return req;\n});\n\n// --- Auth Routes ---\nexport const register = formData => API.post('/auth/register', formData);\nexport const login = formData => API.post('/auth/login', formData);\n// ... other auth functions\n\n// --- Profile & Settings Routes ---\nexport const getProfile = () => API.get('/profile');\nexport const updateProfile = profileData => API.put('/profile', profileData);\nexport const deleteAccount = () => API.delete('/profile');\nexport const getSettings = () => API.get('/settings');\nexport const updateSettings = settingsData => API.put('/settings', settingsData);\n\n// --- Menu Routes ---\n\n// Gets ALL menus for the logged-in user (for the dashboard)\nexport const getAllMenus = () => API.get('/menu');\n\n// Gets a SINGLE menu by its ID (for the builder)\nexport const getMenuById = id => API.get(`/menu/${id}`);\n\n// Creates a NEW menu\nexport const createMenu = menuData => API.post('/menu', menuData);\n\n// Updates a SINGLE menu by its ID\nexport const updateMenuById = (id, menuData) => API.put(`/menu/${id}`, menuData);\n\n// Deletes a SINGLE menu by its ID\nexport const deleteMenuById = id => API.delete(`/menu/${id}`);\n\n// Gets a public menu for customers\nexport const getPublicMenu = menuId => API.get(`/menu/public/${menuId}`);","map":{"version":3,"names":["axios","API","create","baseURL","interceptors","request","use","req","localStorage","getItem","headers","register","formData","post","login","getProfile","get","updateProfile","profileData","put","deleteAccount","delete","getSettings","updateSettings","settingsData","getAllMenus","getMenuById","id","createMenu","menuData","updateMenuById","deleteMenuById","getPublicMenu","menuId"],"sources":["C:/Users/SpiderEL/Desktop/webpage 5.0/frontend/src/api/index.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API = axios.create({ baseURL: 'http://localhost:5000/api' });\r\n\r\n// Add a request interceptor to include the token on all requests\r\nAPI.interceptors.request.use((req) => {\r\n  if (localStorage.getItem('authToken')) {\r\n    req.headers['x-auth-token'] = localStorage.getItem('authToken');\r\n  }\r\n  return req;\r\n});\r\n\r\n// --- Auth Routes ---\r\nexport const register = (formData) => API.post('/auth/register', formData);\r\nexport const login = (formData) => API.post('/auth/login', formData);\r\n// ... other auth functions\r\n\r\n// --- Profile & Settings Routes ---\r\nexport const getProfile = () => API.get('/profile');\r\nexport const updateProfile = (profileData) => API.put('/profile', profileData);\r\nexport const deleteAccount = () => API.delete('/profile');\r\nexport const getSettings = () => API.get('/settings');\r\nexport const updateSettings = (settingsData) => API.put('/settings', settingsData);\r\n\r\n\r\n// --- Menu Routes ---\r\n\r\n// Gets ALL menus for the logged-in user (for the dashboard)\r\nexport const getAllMenus = () => API.get('/menu');\r\n\r\n// Gets a SINGLE menu by its ID (for the builder)\r\nexport const getMenuById = (id) => API.get(`/menu/${id}`);\r\n\r\n// Creates a NEW menu\r\nexport const createMenu = (menuData) => API.post('/menu', menuData);\r\n\r\n// Updates a SINGLE menu by its ID\r\nexport const updateMenuById = (id, menuData) => API.put(`/menu/${id}`, menuData);\r\n\r\n// Deletes a SINGLE menu by its ID\r\nexport const deleteMenuById = (id) => API.delete(`/menu/${id}`);\r\n\r\n// Gets a public menu for customers\r\nexport const getPublicMenu = (menuId) => API.get(`/menu/public/${menuId}`);\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM,CAAC;EAAEC,OAAO,EAAE;AAA4B,CAAC,CAAC;;AAElE;AACAF,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,GAAG,IAAK;EACpC,IAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;IACrCF,GAAG,CAACG,OAAO,CAAC,cAAc,CAAC,GAAGF,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACjE;EACA,OAAOF,GAAG;AACZ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMI,QAAQ,GAAIC,QAAQ,IAAKX,GAAG,CAACY,IAAI,CAAC,gBAAgB,EAAED,QAAQ,CAAC;AAC1E,OAAO,MAAME,KAAK,GAAIF,QAAQ,IAAKX,GAAG,CAACY,IAAI,CAAC,aAAa,EAAED,QAAQ,CAAC;AACpE;;AAEA;AACA,OAAO,MAAMG,UAAU,GAAGA,CAAA,KAAMd,GAAG,CAACe,GAAG,CAAC,UAAU,CAAC;AACnD,OAAO,MAAMC,aAAa,GAAIC,WAAW,IAAKjB,GAAG,CAACkB,GAAG,CAAC,UAAU,EAAED,WAAW,CAAC;AAC9E,OAAO,MAAME,aAAa,GAAGA,CAAA,KAAMnB,GAAG,CAACoB,MAAM,CAAC,UAAU,CAAC;AACzD,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAMrB,GAAG,CAACe,GAAG,CAAC,WAAW,CAAC;AACrD,OAAO,MAAMO,cAAc,GAAIC,YAAY,IAAKvB,GAAG,CAACkB,GAAG,CAAC,WAAW,EAAEK,YAAY,CAAC;;AAGlF;;AAEA;AACA,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAMxB,GAAG,CAACe,GAAG,CAAC,OAAO,CAAC;;AAEjD;AACA,OAAO,MAAMU,WAAW,GAAIC,EAAE,IAAK1B,GAAG,CAACe,GAAG,CAAC,SAASW,EAAE,EAAE,CAAC;;AAEzD;AACA,OAAO,MAAMC,UAAU,GAAIC,QAAQ,IAAK5B,GAAG,CAACY,IAAI,CAAC,OAAO,EAAEgB,QAAQ,CAAC;;AAEnE;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACH,EAAE,EAAEE,QAAQ,KAAK5B,GAAG,CAACkB,GAAG,CAAC,SAASQ,EAAE,EAAE,EAAEE,QAAQ,CAAC;;AAEhF;AACA,OAAO,MAAME,cAAc,GAAIJ,EAAE,IAAK1B,GAAG,CAACoB,MAAM,CAAC,SAASM,EAAE,EAAE,CAAC;;AAE/D;AACA,OAAO,MAAMK,aAAa,GAAIC,MAAM,IAAKhC,GAAG,CAACe,GAAG,CAAC,gBAAgBiB,MAAM,EAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}