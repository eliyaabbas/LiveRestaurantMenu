{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SpiderEL\\\\Desktop\\\\webpage 5.0\\\\frontend\\\\src\\\\contexts\\\\MenuContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useCallback } from 'react';\nimport * as api from '../api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MenuContext = /*#__PURE__*/createContext();\nexport const useMenu = () => {\n  _s();\n  return useContext(MenuContext);\n};\n_s(useMenu, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const MenuProvider = ({\n  children\n}) => {\n  _s2();\n  const [menu, setMenu] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n\n  // useCallback makes this function stable so it doesn't cause re-renders\n  const fetchMenu = useCallback(async () => {\n    try {\n      setLoading(true);\n      const {\n        data\n      } = await api.getMenu();\n      setMenu(data);\n    } catch (err) {\n      setError('Failed to load menu. Please ensure the backend server is running.');\n    } finally {\n      setLoading(false);\n    }\n  }, []); // The empty array [] means this function is created only once.\n\n  const updateMenu = async updatedData => {\n    try {\n      setLoading(true);\n      const {\n        data\n      } = await api.updateMenu(updatedData);\n      setMenu(data);\n      return data;\n    } catch (err) {\n      setError('Failed to save menu.');\n      throw err; // Re-throw the error so the component can catch it\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    menu,\n    setMenu,\n    loading,\n    error,\n    fetchMenu,\n    updateMenu\n  };\n  return /*#__PURE__*/_jsxDEV(MenuContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s2(MenuProvider, \"hZabw8w+5mrPznzEJBN+Cs/Wzn4=\");\n_c = MenuProvider;\nvar _c;\n$RefreshReg$(_c, \"MenuProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useCallback","api","jsxDEV","_jsxDEV","MenuContext","useMenu","_s","MenuProvider","children","_s2","menu","setMenu","loading","setLoading","error","setError","fetchMenu","data","getMenu","err","updateMenu","updatedData","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/SpiderEL/Desktop/webpage 5.0/frontend/src/contexts/MenuContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useCallback } from 'react';\r\nimport * as api from '../api';\r\n\r\nconst MenuContext = createContext();\r\n\r\nexport const useMenu = () => useContext(MenuContext);\r\n\r\nexport const MenuProvider = ({ children }) => {\r\n  const [menu, setMenu] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  // useCallback makes this function stable so it doesn't cause re-renders\r\n  const fetchMenu = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await api.getMenu();\r\n      setMenu(data);\r\n    } catch (err) {\r\n      setError('Failed to load menu. Please ensure the backend server is running.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []); // The empty array [] means this function is created only once.\r\n\r\n  const updateMenu = async (updatedData) => {\r\n    try {\r\n        setLoading(true);\r\n        const { data } = await api.updateMenu(updatedData);\r\n        setMenu(data);\r\n        return data;\r\n    } catch (err) {\r\n        setError('Failed to save menu.');\r\n        throw err; // Re-throw the error so the component can catch it\r\n    } finally {\r\n        setLoading(false);\r\n    }\r\n  }\r\n\r\n  const value = {\r\n    menu,\r\n    setMenu,\r\n    loading,\r\n    error,\r\n    fetchMenu,\r\n    updateMenu,\r\n  };\r\n\r\n  return (\r\n    <MenuContext.Provider value={value}>\r\n      {children}\r\n    </MenuContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,WAAW,QAAQ,OAAO;AAC/E,OAAO,KAAKC,GAAG,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMQ,OAAO,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMP,UAAU,CAACK,WAAW,CAAC;AAAA;AAACE,EAAA,CAAxCD,OAAO;AAEpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACgB,KAAK,EAAEC,QAAQ,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMkB,SAAS,GAAGhB,WAAW,CAAC,YAAY;IACxC,IAAI;MACFa,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM;QAAEI;MAAK,CAAC,GAAG,MAAMhB,GAAG,CAACiB,OAAO,CAAC,CAAC;MACpCP,OAAO,CAACM,IAAI,CAAC;IACf,CAAC,CAAC,OAAOE,GAAG,EAAE;MACZJ,QAAQ,CAAC,mEAAmE,CAAC;IAC/E,CAAC,SAAS;MACRF,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMO,UAAU,GAAG,MAAOC,WAAW,IAAK;IACxC,IAAI;MACAR,UAAU,CAAC,IAAI,CAAC;MAChB,MAAM;QAAEI;MAAK,CAAC,GAAG,MAAMhB,GAAG,CAACmB,UAAU,CAACC,WAAW,CAAC;MAClDV,OAAO,CAACM,IAAI,CAAC;MACb,OAAOA,IAAI;IACf,CAAC,CAAC,OAAOE,GAAG,EAAE;MACVJ,QAAQ,CAAC,sBAAsB,CAAC;MAChC,MAAMI,GAAG,CAAC,CAAC;IACf,CAAC,SAAS;MACNN,UAAU,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMS,KAAK,GAAG;IACZZ,IAAI;IACJC,OAAO;IACPC,OAAO;IACPE,KAAK;IACLE,SAAS;IACTI;EACF,CAAC;EAED,oBACEjB,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAd,QAAA,EAChCA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClB,GAAA,CA9CWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}